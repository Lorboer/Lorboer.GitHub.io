# 将静态内容部署到 GitHub Pages 的简单工作流程
name: 部署静态内容到Pages

on:
  # 当向 main 分支推送代码时触发
  push:
    branches: ["main"]
  # 允许从 Actions 标签手动触发此工作流
  workflow_dispatch:

# 设置 GITHUB_TOKEN 权限以允许部署到 GitHub Pages
permissions:
  contents: read   # 读取仓库内容
  pages: write     # 写入 Pages 服务
  id-token: write  # 生成部署令牌

# 同一时间只允许一个部署运行，跳过排队中的任务（不取消正在进行的）
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest  # 使用 Ubuntu 最新版系统
    steps:
      - name: 检出代码
        uses: actions/checkout@v4  # 将仓库代码拉取到虚拟机

      # ---------- 新增步骤：运行 Python 脚本生成 links.json ----------
      - name: 设置 Python 环境
        uses: actions/setup-python@v4
        with:
          python-version: "3.13"  # 使用最新的 Python 3 版本

      - name: 安装 Python 依赖
        run: |
          pip install requests BeautifulSoup4  # 安装爬虫脚本需要的库（按需修改）
      - name: 执行爬虫脚本
        run: |
          python scripts/crawler.py  # 运行爬虫生成 links.json
        working-directory: ./  # 确保脚本路径正确（假设 crawler.py 在 scripts/ 目录下）
      # ----------------------------------------------------------
      - name: 配置 Pages
        uses: actions/configure-pages@v5  # 初始化 Pages 设置

      - name: 上传构建产物
        uses: actions/upload-pages-artifact@v3
        with:
          # 仅上传包含静态网站的目录（例如 public/）
          # 假设你的网站文件在 public/ 下，links.json 也应在此目录
          path: 'public/'  # ⚠️ 重要：替换为你的静态文件目录！

      - name: 部署到 GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4  # 执行部署
